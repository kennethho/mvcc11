OPTION(MVCC11_USES_STD_SHARED_PTR "Use std::shared_ptr instead of boost::shared_ptr" OFF)
OPTION(BUILD_MVCC11_TEST_WITH_STDLIB_LIBCPP "Build mvcc_test with -stdlib=libc++" OFF)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/)

FIND_PACKAGE(Boost COMPONENTS unit_test_framework REQUIRED)

IF(BUILD_MVCC11_TEST_WITH_STDLIB_LIBCPP)
  IF(NOT "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    MESSAGE(SEND_ERROR "libc++ probably won't work with ${CMAKE_CXX_COMPILER_ID}.")
  ENDIF()
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -stdlib=libc++")

  MESSAGE(SEND_ERROR "Unless your Boost is built with ${CMAKE_CXX_COMPILER_ID} and -std=c++11, using libc++ may not work probably.")
ENDIF()

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -Wall")

IF(MVCC11_USES_STD_SHARED_PTR)
  ADD_DEFINITIONS(-DMVCC11_USES_STD_SHARED_PTR=1)
ENDIF()

IF(MVCC11_USES_STD_SHARED_PTR)
  ADD_DEFINITIONS(-DMVCC11_USES_STD_SHARED_PTR=1)
ENDIF()

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)

ADD_EXECUTABLE(mvcc_test mvcc_test.cpp)

TARGET_LINK_LIBRARIES(mvcc_test ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY} pthread)
